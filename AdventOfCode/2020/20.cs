using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace AdventOfCode._2020
{
    class _20
    {
        public static char[][] Flip(char[][] chars)
        {
            return chars.Select(r => r.Reverse().ToArray()).ToArray();
        }

        public static char[][] RotateLeft(char[][] chars)
        {
            var size = chars.Length;
            return Enumerable.Range(0, size).Select(i => chars.Select(r => r[size - i - 1]).ToArray()).ToArray();
        }

        public static void Copy(char[][] from, char[][] to, int x, int y)
        {
            var size = from.Length;
            for(int yi = 0; yi < size; ++yi)
            {
                for (int xi = 0; xi < size; ++xi)
                {
                    to[y + yi][x + xi] = from[yi][xi];
                }
            }
        }

        public static bool Match(char[][] from, char[][] to, int x, int y)
        {
            for (int yi = 0; yi < from.Length; ++yi)
            {
                for (int xi = 0; xi < from[0].Length; ++xi)
                {
                    if(from[yi][xi] == '#')
                    {
                        if ( to[y+yi][x+xi] == '.')
                        {
                            return false;
                        }    
                    }
                }
            }

            for (int yi = 0; yi < from.Length; ++yi)
            {
                for (int xi = 0; xi < from[0].Length; ++xi)
                {
                    if (from[yi][xi] == '#')
                    {
                        if (to[y + yi][x + xi] == '#')
                        {
                            to[y + yi][x + xi] = 'M';
                        }
                    }
                }
            }

            return true;
        }

        public static void Print(char[][] chars)
        {
            foreach(var l in chars)
            {
                Console.WriteLine(new string(l));
            }
        }

        class Tile
        {
            public int ID;

            public int TopBorder;
            public int RightBorder;
            public int LeftBorder;
            public int BottomBorder;

            public Tile TopTile;
            public Tile RightTile;
            public Tile LeftTile;
            public Tile BottomTile;

            public bool Fixed = false;

            public char[][] Body;

            public Tile()
            {
                ID = -1;
                Fixed = true;
            }
            
            public Tile(string[] input)
            {
                ID = int.Parse(input[0].Split(" ")[1].Split(":")[0]);

                var tileBits = input.Skip(1).Select(l => l.Replace("#","1").Replace(".", "0")).ToArray();

                Body = input.Skip(2).Select(l => l.Substring(1, 8).ToCharArray()).Take(8).ToArray();

                // top and bottom are always l to r
                // left and right are always t to b

                TopBorder = Convert.ToInt32(tileBits[0], 2);
                BottomBorder = Convert.ToInt32(new string(tileBits.Last().ToArray()), 2);
                RightBorder = Convert.ToInt32(new string(tileBits.Select(l => l.Last()).ToArray()), 2);
                LeftBorder = Convert.ToInt32(new string(tileBits.Select(l => l.First()).ToArray()), 2); 
            }

            private int FlipId(int id)
            {
                return Convert.ToInt32(new string(Convert.ToString(id, 2).PadLeft(10, '0').Reverse().Take(10).ToArray()), 2);
            }

            public void Flip()
            {
                if ( Fixed )
                {
                    throw new InvalidOperationException("cant flip");
                }

                TopBorder = FlipId(TopBorder);
                BottomBorder = FlipId(BottomBorder);
                var t = LeftBorder;
                LeftBorder = RightBorder;
                RightBorder = t;

                Body = _20.Flip(Body);
            }

            public void RotateLeft()
            {
                if (Fixed)
                {
                    throw new InvalidOperationException("cant rotate");
                }

                var t = TopBorder;
                TopBorder = RightBorder;
                RightBorder = FlipId(BottomBorder);
                BottomBorder = LeftBorder;
                LeftBorder = FlipId(t);

                Body = _20.RotateLeft(Body);
            }

            public IEnumerable<int> Ids()
            {
                yield return TopBorder;
                yield return RightBorder;
                yield return BottomBorder;
                yield return LeftBorder;
            }

            public IEnumerable<int> AllIds()
            {
                yield return TopBorder;
                yield return RightBorder;
                yield return BottomBorder;
                yield return LeftBorder;

                yield return FlipId(TopBorder);
                yield return FlipId(RightBorder);
                yield return FlipId(BottomBorder);
                yield return FlipId(LeftBorder);
            }

            public IEnumerable<Tile> Tiles()
            {
                yield return TopTile;
                yield return RightTile;
                yield return BottomTile;
                yield return LeftTile;
            }
        }

        private IEnumerable<(int x, int y)> CandidateSpaces(Tile[,] puzzle)
        {
            // Find an empty spot near a filled one
            for (var y = 0; y < 23; ++y)
            {
                for (var x = 0; x < 23; ++x)
                {
                    if ( puzzle[x, y] == null )
                    {
                        if ((x < 22 && puzzle[x + 1, y] != null && puzzle[x + 1, y].ID >= 0)
                            || (y < 22 && puzzle[x, y + 1] != null && puzzle[x, y + 1].ID >= 0)
                            || (x > 0 && puzzle[x - 1, y] != null && puzzle[x - 1, y].ID >= 0)
                            || (y > 0 && puzzle[x, y - 1] != null && puzzle[x, y - 1].ID >= 0))
                        {
                            yield return (x, y);
                        }
                    }
                }
            }
        }

        public void RunA()
        {
            var tiles = input.Split("\r\n\r\n", StringSplitOptions.RemoveEmptyEntries).Select(t => new Tile(t.Split("\r\n", StringSplitOptions.RemoveEmptyEntries))).ToDictionary(t => t.ID, t=>t);

            var allIds = tiles.SelectMany(t => t.Value.AllIds());
            var matches = allIds.Distinct().ToDictionary(id => id, id => allIds.Count(aid => aid == id));
            var test = matches.Where(kv => kv.Value == 2);

            var seedTile = tiles.First().Value;
            seedTile.Fixed = true;

            var puzzle = new Tile[23, 23];
            puzzle[12, 12] = seedTile;

            while (tiles.Any(t => !t.Value.Fixed))
            {
                foreach (var c in CandidateSpaces(puzzle).ToList())
                {


                    Tile topTile = null;
                    Tile rightTile = null;
                    Tile bottomTile = null;
                    Tile leftTile = null;

                    if (c.y > 0) topTile = puzzle[c.x, c.y - 1];
                    if (c.x < 22) rightTile = puzzle[c.x + 1, c.y];
                    if (c.x > 0) leftTile = puzzle[c.x - 1, c.y];
                    if (c.y < 22) bottomTile = puzzle[c.x, c.y + 1];

                    var candidateTiles = tiles.Where(t => !t.Value.Fixed);

                    var idMatch = new int?[4];
                    if (topTile != null)
                    {
                        idMatch[0] = topTile.BottomBorder;
                        candidateTiles = candidateTiles.Where(t => t.Value.AllIds().Contains(topTile.BottomBorder));
                    }
                    if (rightTile != null)
                    {
                        idMatch[1] = rightTile.LeftBorder;
                        candidateTiles = candidateTiles.Where(t => t.Value.AllIds().Contains(rightTile.LeftBorder));
                    }
                    if (bottomTile != null)
                    {
                        idMatch[2] = bottomTile.TopBorder;
                        candidateTiles = candidateTiles.Where(t => t.Value.AllIds().Contains(bottomTile.TopBorder));
                    }
                    if (leftTile != null)
                    {
                        idMatch[3] = leftTile.RightBorder;
                        candidateTiles = candidateTiles.Where(t => t.Value.AllIds().Contains(leftTile.RightBorder));
                    }

                    if (!candidateTiles.Any())
                    {
                        // Hopefully a border
                        puzzle[c.x, c.y] = new Tile();
                    }
                    else
                    {
                        if (candidateTiles.Count() == 1)
                        {
                            var candidate = candidateTiles.Single().Value;
                            var matchingIds = idMatch.Where(i => i.HasValue).Cast<int>();

                            for (int r = 0; r < 8; ++r)
                            {
                                if ( r == 4)
                                {
                                    candidate.Flip();
                                }

                                if (candidate.Ids().Where((id, i) => idMatch[i].HasValue && id != idMatch[i]).Any())
                                {
                                    candidate.RotateLeft();
                                }
                                else
                                {
                                    break;
                                }
                            }

                            if (candidate.Ids().Where((id, i) => idMatch[i].HasValue && id != idMatch[i]).Any())
                            {
                                throw new InvalidOperationException("Bad candidate");
                            }

                            candidate.Fixed = true;
                            puzzle[c.x, c.y] = candidate;
                        }
                    }

                    for(int y = 0; y < puzzle.GetLength(1); ++y)
                    {
                        Console.WriteLine(new string(Enumerable.Range(0, 23).Select(x => puzzle[x, y] == null ? '.' : (puzzle[x, y].ID == -1 ? '#' : 'T')).ToArray()));
                    }
                    Console.WriteLine();
                }
            }
            
            for(int y = 0; y < 23; ++y)
            {
                for (int x = 0; x < 23; ++x)
                {
                    if ( puzzle[x,y] != null && puzzle[x,y].ID != -1)
                    {
                        Console.WriteLine(checked((Int64)puzzle[x, y].ID * puzzle[x+ 11, y].ID * puzzle[x, y+11].ID * puzzle[x+11, y+11].ID));
                        return;
                    }

                }
            }

            
            int g = 56;
        }

        public void RunB()
        {
            //input = testCase1;

            var tiles = input.Split("\r\n\r\n", StringSplitOptions.RemoveEmptyEntries).Select(t => new Tile(t.Split("\r\n", StringSplitOptions.RemoveEmptyEntries))).ToDictionary(t => t.ID, t => t);

            var allIds = tiles.SelectMany(t => t.Value.AllIds());
            var matches = allIds.Distinct().ToDictionary(id => id, id => allIds.Count(aid => aid == id));
            var test = matches.Where(kv => kv.Value == 2);

            var seedTile = tiles.First().Value;
            seedTile.Fixed = true;

            var puzzle = new Tile[23, 23];
            puzzle[12, 12] = seedTile;

            while (tiles.Any(t => !t.Value.Fixed))
            {
                foreach (var c in CandidateSpaces(puzzle).ToList())
                {


                    Tile topTile = null;
                    Tile rightTile = null;
                    Tile bottomTile = null;
                    Tile leftTile = null;

                    if (c.y > 0) topTile = puzzle[c.x, c.y - 1];
                    if (c.x < 22) rightTile = puzzle[c.x + 1, c.y];
                    if (c.x > 0) leftTile = puzzle[c.x - 1, c.y];
                    if (c.y < 22) bottomTile = puzzle[c.x, c.y + 1];

                    var candidateTiles = tiles.Where(t => !t.Value.Fixed);

                    var idMatch = new int?[4];
                    if (topTile != null)
                    {
                        idMatch[0] = topTile.BottomBorder;
                        candidateTiles = candidateTiles.Where(t => t.Value.AllIds().Contains(topTile.BottomBorder));
                    }
                    if (rightTile != null)
                    {
                        idMatch[1] = rightTile.LeftBorder;
                        candidateTiles = candidateTiles.Where(t => t.Value.AllIds().Contains(rightTile.LeftBorder));
                    }
                    if (bottomTile != null)
                    {
                        idMatch[2] = bottomTile.TopBorder;
                        candidateTiles = candidateTiles.Where(t => t.Value.AllIds().Contains(bottomTile.TopBorder));
                    }
                    if (leftTile != null)
                    {
                        idMatch[3] = leftTile.RightBorder;
                        candidateTiles = candidateTiles.Where(t => t.Value.AllIds().Contains(leftTile.RightBorder));
                    }

                    if (!candidateTiles.Any())
                    {
                        // Hopefully a border
                        puzzle[c.x, c.y] = new Tile();
                    }
                    else
                    {
                        if (candidateTiles.Count() == 1)
                        {
                            var candidate = candidateTiles.Single().Value;
                            var matchingIds = idMatch.Where(i => i.HasValue).Cast<int>();

                            for (int r = 0; r < 8; ++r)
                            {
                                if (r == 4)
                                {
                                    candidate.Flip();
                                }

                                if (candidate.Ids().Where((id, i) => idMatch[i].HasValue && id != idMatch[i]).Any())
                                {
                                    candidate.RotateLeft();
                                }
                                else
                                {
                                    break;
                                }
                            }

                            if (candidate.Ids().Where((id, i) => idMatch[i].HasValue && id != idMatch[i]).Any())
                            {
                                throw new InvalidOperationException("Bad candidate");
                            }

                            candidate.Fixed = true;
                            puzzle[c.x, c.y] = candidate;
                        }
                    }

                    /*
                    for (int y = 0; y < puzzle.GetLength(1); ++y)
                    {
                        Console.WriteLine(new string(Enumerable.Range(0, 23).Select(x => puzzle[x, y] == null ? '.' : (puzzle[x, y].ID == -1 ? '#' : 'T')).ToArray()));
                    }
                    Console.WriteLine();
                    */
                }
            }


            (int x, int y)? upperleft = null;
            for (int y = 0; y < 23; ++y)
            {
                for (int x = 0; x < 23; ++x)
                {
                    if (puzzle[x, y] != null && puzzle[x, y].ID != -1)
                    {
                        upperleft = (x, y);
                        break;
                    }
                }
                if (upperleft != null)
                {
                    break;
                }
            }

            for (int y = 0; y < puzzle.GetLength(1); ++y)
            {
                Console.WriteLine(new string(Enumerable.Range(0, 23).Select(x => puzzle[x, y] == null ? '.' : (puzzle[x, y].ID == -1 ? '#' : 'T')).ToArray()));
            }
            Console.WriteLine();

            var puzzleWidth = (int)Math.Sqrt(tiles.Count);
            var bodyWidth = tiles.First().Value.Body[0].Length;
            var mapWidth = bodyWidth * puzzleWidth;

            char[][] map = new char[mapWidth][];
            for(int i = 0; i < mapWidth; ++i)
            {
                map[i] = new char[mapWidth];
            }

            for (int y = 0; y < puzzleWidth; ++y)
            {
                for (int x = 0; x < puzzleWidth; ++x)
                {
                    Copy(puzzle[x + upperleft.Value.x, y + upperleft.Value.y].Body, map, x * bodyWidth, y * bodyWidth);
                }
            }

            var seaMonster = new char[3][]
            {
                "                  # ".ToCharArray(),
                "#    ##    ##    ###".ToCharArray(),
                " #  #  #  #  #  #   ".ToCharArray()
            };

            for (int i = 0; i < 8; ++i)
            {
                if( i == 4)
                {
                    map = Flip(map);
                }
                Print(map);
                Console.WriteLine();

                var monsterCount = 0;
                for (int yi = 0; yi < map.Length - seaMonster.Length; ++yi)
                {
                    for (int xi = 0; xi < map[0].Length - seaMonster[0].Length; ++xi)
                    {
                        if (Match(seaMonster, map, xi, yi))
                        {
                            ++monsterCount;
                        }
                    }
                }

                if ( monsterCount > 0)
                {
                    Console.WriteLine(map.Sum(r => r.Count(c => c == '#')));
                    Print(map);
                    return;
                }

                map = RotateLeft(map);
            }

            



        }

        private string testCase1 = @"Tile 2311:
..##.#..#.
##..#.....
#...##..#.
####.#...#
##.##.###.
##...#.###
.#.#.#..##
..#....#..
###...#.#.
..###..###

Tile 1951:
#.##...##.
#.####...#
.....#..##
#...######
.##.#....#
.###.#####
###.##.##.
.###....#.
..#.#..#.#
#...##.#..

Tile 1171:
####...##.
#..##.#..#
##.#..#.#.
.###.####.
..###.####
.##....##.
.#...####.
#.##.####.
####..#...
.....##...

Tile 1427:
###.##.#..
.#..#.##..
.#.##.#..#
#.#.#.##.#
....#...##
...##..##.
...#.#####
.#.####.#.
..#..###.#
..##.#..#.

Tile 1489:
##.#.#....
..##...#..
.##..##...
..#...#...
#####...#.
#..#.#.#.#
...#.#.#..
##.#...##.
..##.##.##
###.##.#..

Tile 2473:
#....####.
#..#.##...
#.##..#...
######.#.#
.#...#.#.#
.#########
.###.#..#.
########.#
##...##.#.
..###.#.#.

Tile 2971:
..#.#....#
#...###...
#.#.###...
##.##..#..
.#####..##
.#..####.#
#..#.#..#.
..####.###
..#.#.###.
...#.#.#.#

Tile 2729:
...#.#.#.#
####.#....
..#.#.....
....#..#.#
.##..##.#.
.#.####...
####.#.#..
##.####...
##..#.##..
#.##...##.

Tile 3079:
#.#.#####.
.#..######
..#.......
######....
####.#..#.
.#...#.##.
#.#####.##
..#.###...
..#.......
..#.###...";


        private string input = @"Tile 1321:
.###.#.#..
#####.....
.....#..#.
#..##..#.#
...#..#..#
##........
.#.#....#.
#...##....
#.#.#..#..
#.#..#....

Tile 2393:
###.##..##
#..#..#.##
#.#......#
..#.....##
#..#......
.......###
.#...#.#..
#.#....###
......#...
..##....#.

Tile 1301:
.#.#..####
..#..#..##
###...#..#
......##.#
.#.....#.#
#........#
#...#...#.
##....#..#
..........
..#.##..#.

Tile 2647:
####.#.#.#
....##....
##.####..#
#.#.#...##
..#..#....
#......#.#
..#..#....
....##...#
#.#.#....#
#.#..#.##.

Tile 2707:
###.......
##.###....
.#........
##...#....
#....##...
##.....#.#
.#..#....#
....##..##
#.#.#.#..#
##.##.##.#

Tile 2521:
..#.#.#...
..........
#.##......
#...#.....
..........
.........#
#........#
..##.#..##
#.#####...
..#..#..##

Tile 3041:
#..#..#...
#.#....##.
###..#..##
##.##...##
.......#.#
...#....#.
.#.#.....#
.........#
.........#
###..#.#.#

Tile 3529:
..####.##.
..........
#.#.......
#.......#.
#........#
...##..#..
#......#.#
#.........
.#...#....
.#.....###

Tile 1361:
#.#####.#.
.##....#.#
#.#.#.....
#.....##..
..#.#..#..
#...#..#..
...#......
....####.#
.##.....#.
.####.###.

Tile 1303:
.####.#...
..........
.....#...#
#..##.#...
......#...
.........#
#..##.##..
#...####.#
#....#....
...#..#.##

Tile 2903:
.#####..##
....#.#..#
#.........
..#.#....#
#.###.#...
#...#...##
#.#..#....
#........#
#....##..#
####.#.#.#

Tile 3299:
...#.#..#.
.......#..
...#...#.#
......#...
#......#..
#......#.#
..#......#
#....#....
.......###
..####.##.

Tile 2659:
##....####
#.#..#....
#.#.....#.
#.....#..#
.....##...
###..#....
#.#...#...
##.###....
#....#..#.
..##..###.

Tile 3037:
..#####.#.
..#...#.#.
......#...
.##......#
#.......##
....#.....
..#.##..##
..#...#...
....#.....
#####.#.##

Tile 2161:
#....#...#
..#..#...#
.#........
.#...#..##
#.##.....#
...#...#..
..#......#
####......
#....##..#
##..#.###.

Tile 2767:
..##.#..#.
#.......#.
#........#
..#...#.##
#.......##
.##.....#.
....#.##..
.#..##....
..#.......
..#..##..#

Tile 1277:
.##....#..
.##..#....
###.......
#.#.#....#
#.....#...
#..#.##.##
##...##..#
#.....#...
....#..#.#
#..#####.#

Tile 3593:
.##...###.
.#.....#..
##....#...
.......#.#
#.......##
#.#.#....#
.#.##.....
#...#..#.#
##.####.#.
.....###..

Tile 2617:
##..#.####
.#.....#..
.#..##..#.
..#..#.#..
#........#
...#...###
..#####...
...#....##
.#.....##.
..##.##.#.

Tile 1103:
....##..#.
.#.....##.
#........#
#.........
###....#..
.......#..
.........#
#..#.#.#..
#..#.#...#
##.##..##.

Tile 3019:
###.#..#.#
..##...#..
..#......#
##.###....
#.#......#
......#..#
#....#.#.#
##..#...##
###.##...#
###.#..#..

Tile 2909:
..#.....#.
#.......##
#....##.#.
#..#.###.#
..#...##..
#...#....#
.........#
.#........
###....###
...###.##.

Tile 3733:
.#.####...
..#.....##
......#...
.#...#...#
....##....
......###.
..#.####.#
..#..#...#
#.##..##..
.#.###.##.

Tile 3851:
###.......
#..##.....
......#.##
#..##....#
#...##...#
...###.#.#
.....#.###
#...#...##
.###.....#
...#.##..#

Tile 3137:
#..##.#.#.
..#...#...
.##...#...
.....#..##
....##.#.#
........##
.#....##.#
#..#......
#..#.#.#..
.###..#.##

Tile 1697:
.##..##.##
..#..#..#.
#....##.##
#.....#..#
..#.....##
#...#.#..#
####...#..
.........#
......#...
.#####..##

Tile 3301:
.#.#.#.###
##.#......
#.#....#.#
#..#....##
#......#.#
..##...###
##...#.###
.#.####...
#..#......
.##.###.##

Tile 2237:
#.###.#.##
..........
##..#.#.#.
.......#.#
...#....#.
#.#.##....
#.##....##
...###.#..
#.....#.##
.##......#

Tile 2897:
....###.##
.###....#.
....#..###
........#.
..#...#..#
#...#.....
.#.###.#..
..#....#.#
#.#.#....#
.####....#

Tile 1423:
#.#.#..#..
...#.#...#
#.###.....
###....#..
#.#.#...##
....##....
..#......#
...#......
#.#...###.
.###......

Tile 1297:
#.#.#.##..
#..#..#..#
#..#.##..#
#.......#.
#..#....##
.###.#...#
##.....##.
.#.###.#..
###...#...
..##..###.

Tile 3463:
.#.#######
#...##.##.
#.##..#..#
....##....
.#.##.####
.##....###
#.#.##..##
#.......#.
.#...#.###
##.#....#.

Tile 1951:
...####.##
..##....#.
####.....#
#.#..##...
...#.###..
#...##....
#.#.#....#
...##.##..
......##..
.#..##.#..

Tile 1429:
.##..#.#..
.#.....#..
...###...#
.#........
#.#......#
.##......#
#......#..
..........
........##
#.##..####

Tile 1319:
..#.....##
#......##.
.........#
...#...###
###..#....
#..##..#.#
#.........
...###...#
.........#
...######.

Tile 1373:
#.#..#####
##..#...#.
....#....#
..####...#
#.#.....#.
#.#.......
#.###..#.#
...#....#.
##...##..#
##..#..#.#

Tile 1733:
##..##...#
...#.....#
.#....#...
#.#.......
#..#.#....
#.##.....#
.###...#..
#...##..#.
.......##.
###.##..##

Tile 3767:
..#.#.##.#
#.........
......#..#
#.#.....##
#.....##.#
........##
.#.......#
.#..#..#.#
#...#...#.
..#..#.##.

Tile 1249:
#####...##
..#....#..
.....#....
...##...#.
.#.......#
...#......
...#..#.##
#..#.#..#.
.##.....#.
#.##..#...

Tile 3719:
....###.#.
.#.......#
..#...#.##
....#.##.#
.....#....
###...#..#
.......#.#
#...#....#
....#.....
##...#..#.

Tile 3547:
#..#.#..##
.##.......
##....#..#
..#......#
.....#..##
#.###....#
#......#.#
##....#.#.
##....#.#.
.##..##.#.

Tile 3167:
##..#..#.#
##..#....#
...#...#.#
#..#.#....
#...#...#.
..#..#....
..#......#
#...##...#
..##......
.##..##...

Tile 1129:
..#.#.#...
..#.......
.#......##
..#.#....#
..#......#
####..#..#
#..##..#.#
#...#.....
#....#.#.#
.###.###..

Tile 1553:
#.##.##...
#..#.....#
..........
.#...#...#
.#.#..#.#.
..####...#
#...#...#.
#.###...#.
#.#..#...#
...#.###.#

Tile 2351:
..#.......
###....#.#
.#..#...#.
#....##...
#..##..#.#
..###..#.#
.#....#.##
..#.......
#..#.....#
.#..####..

Tile 1069:
#####...#.
##....#...
...####..#
#..#...##.
#..#.....#
#...#####.
#.#..#...#
#.####...#
.........#
..###...#.

Tile 2069:
.#....#.#.
........##
.#....#..#
#.....#..#
##....#.##
....#.....
........#.
.#..#..###
....#.##..
..####.#..

Tile 2791:
..#..#.##.
#....#...#
#........#
#..#.....#
#.......#.
#..#...#.#
.#.......#
.##.......
#..#.....#
.#.#.##.#.

Tile 2843:
..#..#####
.#..###.#.
#...##.#.#
##.##.#...
....#.....
..#.#.....
......#...
..#...#...
.#..#....#
.##.###..#

Tile 1543:
...##.#..#
#......#.#
....#.#...
.........#
#...#.#..#
....#.....
.......#..
...#......
#.#....#..
#..#...#.#

Tile 2657:
#.#.#.#..#
.#..##.#.#
#.##.#....
....#.....
#........#
#.##...#..
#........#
.#.......#
#........#
#.##.####.

Tile 1483:
##.#.#####
#....#...#
........##
#..#....#.
##...#...#
..........
##..#.....
##......##
#...#...#.
.##.##..##

Tile 2689:
#..#..####
#.#..#..##
#...##.#.#
.#......##
.#..#.....
#....#...#
....##....
...#.###.#
......##..
#..###.#..

Tile 1013:
###.######
##...#.###
####.#...#
..#..#..##
##....###.
.##...#.#.
..#....#..
#.#.......
#.#...#..#
##.#.....#

Tile 1171:
.#..######
#.#......#
.....#....
..#.#.....
#.......#.
#.#...#...
#....#.#..
..#....#.#
#.#..#.#..
.......#.#

Tile 2003:
..###.####
...#....#.
...##.....
#.........
#..##.....
###......#
#....#...#
..#...#...
..#.......
#####...##

Tile 3709:
.#..#.##..
##.......#
#..#..##.#
...#.#.#..
#......#..
....#....#
#....#...#
.#....#..#
#...##...#
#.###..#..

Tile 1151:
.#...####.
.......#..
##......##
#.......#.
#.#...####
##.##..#.#
..#.......
##.......#
#.##.#....
#..#..##.#

Tile 3917:
.####.#.#.
#.....#..#
...#.#..#.
...#.#....
....##....
#.#...##..
###...##..
##....#..#
.....#...#
.#.###.###

Tile 2557:
.##.##.#..
#.....#...
#.......#.
.##..#.#.#
........#.
..#..###..
#.#.##.###
.#...###.#
.#....##.#
....###...

Tile 2309:
#.#.#...##
...#..##..
...#...##.
..##..##.#
#.#......#
.....#....
#.#......#
.##.###.#.
#...#....#
#..#..#...

Tile 2857:
..###....#
##.##.#...
#...#.....
##......##
...#.....#
#......#.#
...#..#..#
###..#.#..
#.#.#..#.#
..###.#...

Tile 2129:
#...#.#.#.
........#.
..#..#####
#.#....###
....#..#.#
..#.##....
##.##....#
#.........
.#..#...#.
..#..#.#..

Tile 3853:
####..#..#
...##.....
..........
...#.....#
#...#.....
.###.....#
...##.#...
.#...###.#
#.#.......
#.##...###

Tile 1993:
.##....#..
#.........
#..#......
#.#......#
.........#
###...#..#
##.##.#.##
.....##.##
##..#.##..
..#.#.#..#

Tile 2953:
##.#.####.
#.....#..#
##..##...#
....#....#
#..#.#....
....#....#
.#..#...##
...#...#..
#...#....#
#....##.##

Tile 2753:
##....##..
#...#.###.
..#..#.#.#
##.####.##
....###..#
.#......##
..###..#.#
#.........
#..###.##.
#######...

Tile 2333:
.#....#...
.....###.#
#.......##
...#....##
#....#...#
..........
..#.##.##.
#..#...###
.....#....
###....#.#

Tile 1439:
.....#....
#..#..#.#.
#......###
.#..##...#
..###.#...
##.....#.#
.#...#.#.#
##.#..#..#
#...#.....
..########

Tile 2543:
#####.##.#
#.......##
....#.#..#
...#.#...#
#......#..
......#..#
.#.#..#..#
...##.#...
#..#.#.#.#
#...#..#.#

Tile 1097:
##.###.#.#
.#....##..
.#.#..##.#
#.#.....##
..#..#...#
...#....##
..#.#.###.
#......#..
.....###..
...#.#.#.#

Tile 2269:
#.##..###.
##..#.....
#.#.#.##..
##.#.##.##
....#...##
#.#.#..#.#
...#.#..#.
....#....#
...#...#.#
#..#.#.#..

Tile 2423:
####.###.#
....#..#..
......#...
....#..##.
#..#.#.###
#.##.##...
...##..#.#
....#...#.
.#....#...
.....###..

Tile 1999:
.#....#...
......#.##
.....##..#
.......#..
#.....####
..#....#.#
#.......#.
.#....#.#.
...#..##.#
..#.####..

Tile 3727:
..#..#.#..
...#...###
..#.......
###..#..##
.#.#...#.#
##.#....##
#....##.#.
.#......#.
....#.#..#
.#.###.#.#

Tile 3617:
###.#.....
#.....#..#
#......#.#
#.#.......
#.#..#.##.
.#.#..#.##
#....#.#..
.##.......
......#..#
##.###.#..

Tile 3121:
..#.#...#.
..#####.#.
.#........
#.#......#
...#..##.#
#.......##
##..#.#..#
###.......
##..#.####
#.###.##..

Tile 2131:
###...###.
.........#
#.#....##.
#...##....
#..#.#...#
.#..#..#..
..#..#....
........#.
#.......##
.##.....#.

Tile 2719:
##.....###
#.......#.
..........
......#...
.....##..#
###.#.#.#.
#........#
#.#....#..
.##......#
..###..##.

Tile 2441:
....#.##.#
.#..##...#
#.#.#..##.
......##..
..........
#......#.#
##...#...#
.#..##.#..
..##....##
#.###...##

Tile 3623:
.#.....#.#
###...##.#
#........#
#....##..#
...#.....#
#.......#.
###.......
...#....##
.....#...#
#.#...#..#

Tile 1549:
.###...#.#
##....#...
..........
#........#
....#.....
...#...#..
#.......##
.....#..#.
#.#..#..##
#.#.#...##

Tile 1489:
##....#...
#.......##
#.#.#..###
.##.......
.#..#.#...
..#....###
........#.
#...#.....
.........#
#....##.#.

Tile 2221:
#####.....
......#..#
........##
....##..#.
..#.##..##
.##.......
#.#....#..
.....#.#.#
#...#....#
..##.##.#.

Tile 1699:
.##..#.#..
#...#....#
......#..#
#.#......#
#.....#...
..........
.....#....
#..#.....#
.....#...#
...#.####.

Tile 2927:
#####.#..#
.#..##...#
#.........
#.#..#...#
.........#
#.##.#.##.
..........
#.....#..#
###..#...#
#.##.#...#

Tile 2377:
....#...##
....##...#
#.........
.#...##..#
##.##.#...
...#.#...#
..#......#
.......#.#
..#...##..
..##.#.#.#

Tile 3761:
.##...#...
..#...##..
..........
.###......
##......#.
#...##...#
.....#.#..
..#......#
.......##.
#####..###

Tile 3769:
#.####..##
....#...#.
....#.....
..##......
#.........
##.#..#..#
...#.....#
#...##..#.
#..#......
.####..##.

Tile 1607:
.#...####.
##..#....#
#...#.##..
......#...
#.#.....#.
##.#..#...
#.........
..###..#.#
.##..#...#
#.#.#.###.

Tile 3557:
###.###.##
#.#......#
.......###
#.#.#....#
##.......#
##..#...#.
..#.....#.
.....###..
#......#..
..###..###

Tile 2713:
###.#..###
....###.##
#.#.#....#
##..#..#.#
##....#.##
..#.......
..#..#.##.
##...##...
#.##....##
.#.#....#.

Tile 2579:
.#.##....#
........#.
##.##.....
....###.##
....#.....
....#..#.#
.......#..
.#..##....
...#...#.#
####.#...#

Tile 3797:
####...#..
#...##....
..#..#.#..
..#.......
.##..##...
#...##..#.
#......#..
..#..#...#
####..#...
##.#.##.##

Tile 3947:
#.###....#
##...#...#
......#..#
#...##.###
#..#.#....
.#...##.##
####...#.#
#....#...#
#..#.#...#
#.##.##.#.

Tile 3413:
.##.#.###.
##...##..#
#.#......#
....##..#.
.....#...#
##....#...
##.....#.#
##........
.###..#..#
.#..###..#

Tile 1861:
#.####..##
##........
.#.......#
...#.#....
.#.....#..
.#..#....#
#.......##
#.#....#.#
..........
#....#.#..

Tile 1583:
..#.##...#
...###...#
..........
...##.....
.........#
#......#..
..#......#
..........
....#....#
........#.

Tile 2797:
#..##..###
###.....#.
#....#....
...#.#..##
##.....#..
###.......
#.....#..#
.#..###..#
#...#.....
#####.##..

Tile 2621:
....##..#.
#...#...#.
#.##.#..##
..#...#..#
.##.###...
.....##...
.#........
...#.#....
...#.....#
..#....###

Tile 2437:
..###..#.#
#.#.#..#.#
.#.##.....
###..#.##.
##..##...#
....#.##.#
..#...#..#
.......#..
........#.
.#..#.###.

Tile 2347:
.##.#.####
..#....#..
#..#...#.#
......#..#
#.#....#..
....#.....
.......#..
..#...##.#
#..#...###
#...####.#

Tile 2029:
#.###.####
..#.##....
.#....#..#
#.....#...
#....#....
...#......
..........
..#..#..#.
.#...##.##
##.###....

Tile 1693:
.....#..#.
#...#..#.#
#....#..##
#.....#..#
......#.##
#......###
##......##
..#......#
...#......
##...#.###

Tile 2371:
##.###.##.
.#...#....
#.#...#.##
#..#.....#
.#...#....
#.#.##...#
........##
#........#
..#....##.
..##...##.

Tile 1609:
#..#.####.
..#...#..#
#.........
#.###....#
.#......##
#...#.....
#.#..#....
....#..#.#
#.....#...
.#.#.#####

Tile 2089:
...#..#.#.
#.......#.
..###..#..
#.##....##
.#......##
.........#
.##......#
.....#...#
.........#
###..#.#..

Tile 2551:
#..###.#.#
.##....###
##.#.##.##
#.....#..#
#....#.#..
.#.......#
.#...###.#
........#.
.....#....
....#....#

Tile 2297:
.#####.#..
#.........
....#..#..
.#..#.....
##..##..#.
#.#.#.....
#.#......#
#......#.#
##....####
#.#.#.###.

Tile 1201:
....#...##
#...#...#.
###.....##
#......#..
...##.....
..#.......
..#...##.#
#........#
.#..##..##
.#...#....

Tile 1759:
......##..
....#.#..#
#......#.#
#.#.#.....
#.#..##.#.
#..###....
.#..#....#
#..##..###
#.........
##..#.#.##

Tile 2477:
###...###.
#..#...#.#
...#..#..#
#.#....#.#
..#.#...#.
...##.....
#...##.#..
...#......
.##......#
.###.#...#

Tile 3779:
.####..###
###..#....
#...##...#
#......#.#
#...##..#.
....#..#.#
........##
.....#..#.
.#...#..#.
.##.###.#.

Tile 3407:
#.....#.##
.#..#..###
.#..#.....
..#..#...#
....##.###
#.#......#
###......#
#........#
..........
###.##.##.

Tile 2699:
#.#..###.#
##........
......#..#
..........
....#.#..#
....##...#
.....#.#..
#....#....
##..#.....
###..##..#

Tile 1499:
#.#..#.##.
....##....
.###.#####
#....##...
........##
.#.###.##.
....#.#...
.........#
......#.##
##.##.##.#

Tile 3449:
.#.#..#...
#.#.....#.
......#...
#....##...
.#........
.....#.#.#
#..#..#.#.
#.#.#.##..
..#...##..
#..#..##.#

Tile 3259:
###.#.####
##..##..##
.....##...
..#....#..
##........
#.....#.##
#.#.#..#.#
.#.#.##..#
#.....#.#.
.#.####..#

Tile 3361:
##.#.#..##
..........
......#..#
....#..#.#
..#..##...
.#......#.
#..#.#...#
...#..#...
..##..#.##
.#..###...

Tile 2687:
##..#..#..
##...###.#
..#..###..
......##..
#......#..
#.....#.##
...#....#.
....#....#
.#...#..#.
####.#.##.

Tile 1471:
..#.......
..#...##.#
##.....#.#
#.##....##
...##..#.#
.......#.#
....#..##.
#.#....###
#......#..
..#.##....

Tile 1019:
..#.#...##
........#.
...#.....#
#.....#...
....#.#..#
#..#....##
#.......#.
#...#..#..
#.......#.
#..##.#...

Tile 1867:
.#####..#.
#........#
.#........
....##...#
#...#....#
#.....#.##
##.##..###
#.##.#..##
..#...#.#.
..#...####

Tile 2203:
...#####..
....#.....
#...#.####
#.##..#...
.#..#.#.#.
#..###.#..
......#.##
#....##...
#......###
##.####...

Tile 2039:
.###..##.#
.#.#.##...
....###...
...#.#####
.##...#...
#..#..#..#
#...#...#.
......#..#
#.#..#...#
.#..##.#.#

Tile 2609:
#...#.###.
#...##..#.
#..#..#...
......##.#
...#..#.##
#........#
#.........
##..#.....
#...#..#..
.#.###....

Tile 1789:
#.####.#.#
..#...#...
.#..#...##
...#.....#
.#..##....
#....#...#
#....#....
#.#..#.#..
##.......#
###.#.#...

Tile 1259:
#....##...
#..###..##
.#.##.#..#
...#...#..
##.......#
#.....#...
#......##.
.#...#....
...#.#....
.###.####.

Tile 2239:
#.#.##.###
###....##.
#...#.##.#
...#.###.#
.........#
#...##...#
#....#...#
..##...#..
#.....#..#
#.##...#.#

Tile 1213:
.#...#..#.
.#...#.#..
#.........
.#..#..#.#
#....##...
#...#..#.#
.##....#.#
#..#..#..#
......#...
##..#.####

Tile 3491:
.....##..#
...###..#.
.....#...#
...#....#.
......##.#
.......#.#
..#.#.....
###..###..
#.........
.#..###.##

Tile 1531:
..##.#.#..
.#...#....
#.....#.#.
#....#...#
#..##...#.
...#....#.
#.###.#...
.##.#..##.
###.....#.
.#....#.##

Tile 2179:
...#..##.#
..#......#
#...#.....
.....#....
#..#..#..#
###...##..
#.#....#..
....#.....
.........#
..#.##..##

Tile 3251:
.####.#..#
#..#......
#..##.##.#
#.##.#...#
.......#..
.....#...#
#...#...##
.......#.#
#.#.....##
#......#.#

Tile 1187:
.#..##.#.#
..#.##.###
#....#....
.........#
#........#
.....#.#.#
...#..#.##
.#...#.#.#
.....#.#..
##.#.##..#

Tile 1663:
..#.#.##..
.#.....###
#....#....
...#......
........##
......###.
.........#
.#..##.###
##....#...
###.#.#.##

Tile 1289:
##.#.##.##
##....#..#
#........#
#...#..###
........##
#...#.....
.#.##..#..
####.....#
#.####....
#######.#.

Tile 3527:
#.....#..#
...#..####
#.........
.#.#...###
..#.......
#.....#...
#.......#.
#....#...#
##..#####.
##...####.

Tile 2141:
.#.##..##.
...#.#.#.#
......#..#
#.#....#..
.#...#..##
#....#..##
#.#..##.#.
.##.......
##....#..#
#.#..#....

Tile 3209:
####..#.#.
.##.##...#
#.......#.
##...#...#
......#...
#.........
.##......#
.#.####..#
#..#.#...#
##.#...#..

Tile 1063:
##.###.#..
.#...#....
##.......#
##..#.....
......##..
.##.##....
......#...
#.#.....#.
....#.....
###.#.#..#

Tile 1907:
...#.#.#.#
##.#..#.#.
..#..#...#
...#..##..
.#.###.###
#.##...#.#
#.#..####.
....#..#..
....#.##..
...##..##.

Tile 3347:
#.#..#...#
##......##
#.#.#.##.#
.#.#.#...#
#.........
#..#......
.........#
#...#...##
#.........
.#.###.###

Tile 2099:
###.#.#...
#..#......
#.....#..#
#..#.###.#
#...##...#
..##......
#...#...##
#..###....
.#..#....#
...#.##...
";
    }
}
